defmodule Gettext.PO.Translations do
  alias Gettext.PO.Translation
  alias Gettext.PO.PluralTranslation

  defmacrop is_translation(module) do
    quote do
      unquote(module) in [Translation, PluralTranslation]
    end
  end

  @doc """
  Tells whether a translation was manually entered or generated by Gettext.

  As of now, a translation is considered autogenerated if it has one or more
  references.

  ## Examples

      iex> t = %Gettext.PO.Translation{msgid: "foo", references: [{"foo.ex", 1}]}
      iex> Gettext.PO.Translations.autogenerated?(t)
      true

  """
  @spec autogenerated?(Gettext.PO.translation) :: boolean
  def autogenerated?(translation)

  def autogenerated?(%{__struct__: s, references: []})
    when is_translation(s),
    do: false
  def autogenerated?(%{__struct__: s, references: _})
    when is_translation(s),
    do: true

  @doc """
  Tells whether two translations are the same translation according to their
  `msgid`.

  This function returns `true` if `translation1` and `translation2` are the same
  translation, where "the same" means they have the same `msgid` or the same
  `msgid` and `msgid_plural`.

  ## Examples

      iex> t1 = %Gettext.PO.Translation{msgid: "foo", references: [{"foo.ex", 1}]}
      iex> t2 = %Gettext.PO.Translation{msgid: "foo", comments: ["# hey"]}
      iex> Gettext.PO.Translations.same?(t1, t2)
      true

  """
  @spec same?(Gettext.PO.translation, Gettext.PO.translation) :: boolean
  def same?(translation1, translation2)

  def same?(%Translation{msgid: m}, %Translation{msgid: m}),
    do: true
  def same?(%PluralTranslation{msgid: m, msgid_plural: mp}, %PluralTranslation{msgid: m, msgid_plural: mp}),
    do: true
  def same?(_, _),
    do: false

  @doc """
  Merges two translations giving precedence to the second one.

  This function is used to merge two **matching** translations (i.e., for which
  `same?/2` returns `true`). For the fields where it makes sense, the second
  translation overwrites the first translation (for example in the `:references`
  field: the `:references` of the first translation are simply discarded).

  ## Examples

      iex> t1 = %Gettext.PO.Translation{msgid: "foo", msgstr: "a", comments: ["# hey"], references: [{"foo.ex", 1}]}
      iex> t2 = %Gettext.PO.Translation{msgid: "foo", msgstr: "b", comments: ["# hi"], references: [{"new.ex", 2}]}
      iex> Gettext.PO.Translations.merge(t1, t2)
      %Gettext.PO.Translation{msgid: "foo", msgstr: "b", comments: ["# hey", "# hi"], references: [{"new.ex", 2}]}

  """
  @spec merge(Gettext.PO.translation, Gettext.PO.translation) :: Gettext.PO.translation
  def merge(old_translation, new_translation) do
    unless same?(old_translation, new_translation) do
      raise ArgumentError, "expected translations to match"
    end

    do_merge(old_translation, new_translation)
  end

  defp do_merge(%Translation{} = old, %Translation{} = new) do
    %Translation{
      msgid: new.msgid,
      msgstr: new.msgstr,
      comments: merge_comments(old.comments, new.comments),
      references: new.references,
    }
  end

  defp do_merge(%PluralTranslation{} = old, %PluralTranslation{} = new) do
    %PluralTranslation{
      msgid: new.msgid,
      msgid_plural: new.msgid_plural,
      msgstr: new.msgstr,
      comments: merge_comments(old.comments, new.comments),
      references: new.references,
    }
  end

  defp merge_comments(old, new) do
    translator_comments(old) ++ translator_comments(new)
  end

  defp translator_comments(comments) do
    Enum.filter comments, &match?("# " <> _, &1)
  end
end
